FROM ubuntu:bionic

# gcc for cgo
RUN apt-get update && apt-get install -y --no-install-recommends \
    g++ \
    gcc \
    libc6-dev \
    make \
    wget \
    pkg-config \
    ca-certificates \
    gpg gpg-agent \
    dirmngr \
    git \
    curl \
  && rm -rf /var/lib/apt/lists/*

ENV PATH /usr/local/go/bin:$PATH

ENV GOLANG_VERSION 1.16.5

RUN set -eux; \
  \
  dpkgArch="$(dpkg --print-architecture)"; \
  url=; \
  case "${dpkgArch##*-}" in \
    'amd64') \
      url='https://dl.google.com/go/go1.16.5.linux-amd64.tar.gz'; \
      sha256='b12c23023b68de22f74c0524f10b753e7b08b1504cb7e417eccebdd3fae49061'; \
      ;; \
    'armel') \
      export GOARCH='arm' GOARM='5' GOOS='linux'; \
      ;; \
    'armhf') \
      url='https://dl.google.com/go/go1.16.5.linux-armv6l.tar.gz'; \
      sha256='93cacacfbe87e3106b5bf5821de106f0f0a43c8bd1029826d44445c15df795a5'; \
      ;; \
    'arm64') \
      url='https://dl.google.com/go/go1.16.5.linux-arm64.tar.gz'; \
      sha256='d5446b46ef6f36fdffa852f73dfbbe78c1ddf010b99fa4964944b9ae8b4d6799'; \
      ;; \
    'i386') \
      url='https://dl.google.com/go/go1.16.5.linux-386.tar.gz'; \
      sha256='a37c6b71d0b673fe8dfeb2a8b3de78824f05d680ad32b7ac6b58c573fa6695de'; \
      ;; \
    'mips64el') \
      export GOARCH='mips64le' GOOS='linux'; \
      ;; \
    'ppc64el') \
      url='https://dl.google.com/go/go1.16.5.linux-ppc64le.tar.gz'; \
      sha256='fad2da6c86ede8448d2d0e66e1776e2f0ae9169714eade29b9ffbbdede7fc6cc'; \
      ;; \
    's390x') \
      url='https://dl.google.com/go/go1.16.5.linux-s390x.tar.gz'; \
      sha256='21085f6a3568fae639edf383cce78bcb00d8f415e5e3d7feb04b6124e8e9efc1'; \
      ;; \
    *) echo >&2 "error: unsupported architecture '$dpkgArch' (likely packaging update needed)"; exit 1 ;; \
  esac; \
  build=; \
  if [ -z "$url" ]; then \
# https://github.com/golang/go/issues/38536#issuecomment-616897960
    build=1; \
    url='https://dl.google.com/go/go1.16.5.src.tar.gz'; \
    sha256='7bfa7e5908c7cc9e75da5ddf3066d7cbcf3fd9fa51945851325eebc17f50ba80'; \
    echo >&2; \
    echo >&2 "warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source"; \
    echo >&2; \
  fi; \
  \
  wget -O go.tgz.asc "$url.asc" --progress=dot:giga; \
  wget -O go.tgz "$url" --progress=dot:giga; \
  echo "$sha256 *go.tgz" | sha256sum --strict --check -; \
  \
# https://github.com/golang/go/issues/14739#issuecomment-324767697
  export GNUPGHOME="$(mktemp -d)"; \
# https://www.google.com/linuxrepositories/
  gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 'EB4C 1BFD 4F04 2F6D DDCC EC91 7721 F63B D38B 4796'; \
  gpg --batch --verify go.tgz.asc go.tgz; \
  gpgconf --kill all; \
  rm -rf "$GNUPGHOME" go.tgz.asc; \
  \
  tar -C /usr/local -xzf go.tgz; \
  rm go.tgz; \
  \
  if [ -n "$build" ]; then \
    savedAptMark="$(apt-mark showmanual)"; \
    apt-get update; \
    apt-get install -y --no-install-recommends golang-go; \
    \
    ( \
      cd /usr/local/go/src; \
# set GOROOT_BOOTSTRAP + GOHOST* such that we can build Go successfully
      export GOROOT_BOOTSTRAP="$(go env GOROOT)" GOHOSTOS="$GOOS" GOHOSTARCH="$GOARCH"; \
      ./make.bash; \
    ); \
    \
    apt-mark auto '.*' > /dev/null; \
    apt-mark manual $savedAptMark > /dev/null; \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
    rm -rf /var/lib/apt/lists/*; \
    \
# pre-compile the standard library, just like the official binary release tarballs do
    go install std; \
# go install: -race is only supported on linux/amd64, linux/ppc64le, linux/arm64, freebsd/amd64, netbsd/amd64, darwin/amd64 and windows/amd64
#    go install -race std; \
    \
# remove a few intermediate / bootstrapping files the official binary release tarballs do not contain
    rm -rf \
      /usr/local/go/pkg/*/cmd \
      /usr/local/go/pkg/bootstrap \
      /usr/local/go/pkg/obj \
      /usr/local/go/pkg/tool/*/api \
      /usr/local/go/pkg/tool/*/go_bootstrap \
      /usr/local/go/src/cmd/dist/dist \
    ; \
  fi; \
  \
  go version

ENV GOPATH /go
ENV PATH $GOPATH/bin:$PATH
RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
WORKDIR $GOPATH

ENV BACKEND_VERSION $BACKEND_VERSION
ENV ARTIFACT_URL $ARTIFACT_URL
ENV ARTIFACT_USER_PASSWORD $ARTIFACT_USER_PASSWORD

ENTRYPOINT  echo "Building sensu-backend from $BACKEND_VERSION"; \
            BACKEND_VERSION_NUMERIC=$(echo $BACKEND_VERSION | sed 's/v//'); \
            git clone https://github.com/sensu/sensu-go.git; \
            cd sensu-go; \
            git checkout $BACKEND_VERSION; \
            go build -ldflags '\
              -X "github.com/sensu/sensu-go/version.Version=$BACKEND_VERSION_NUMERIC" \
              -X "github.com/sensu/sensu-go/version.BuildDate=$(date +\%Y-\%m-\%d)" \
              -X "github.com/sensu/sensu-go/version.BuildSHA='`git rev-parse HEAD`'"'\
              -o bin/sensu-backend-$BACKEND_VERSION_NUMERIC ./cmd/sensu-backend; \
            curl -w "HTTP return code: %{http_code}\n" --upload-file "bin/sensu-backend-$BACKEND_VERSION_NUMERIC" "$ARTIFACT_URL" -u "$ARTIFACT_USER_PASSWORD"